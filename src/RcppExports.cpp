// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// negloglik_overall
double negloglik_overall(const arma::vec& arg, const arma::vec& z, double trunc_lower, double trunc_upper, double p0);
RcppExport SEXP _EmpiNull_negloglik_overall(SEXP argSEXP, SEXP zSEXP, SEXP trunc_lowerSEXP, SEXP trunc_upperSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type trunc_lower(trunc_lowerSEXP);
    Rcpp::traits::input_parameter< double >::type trunc_upper(trunc_upperSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(negloglik_overall(arg, z, trunc_lower, trunc_upper, p0));
    return rcpp_result_gen;
END_RCPP
}
// negloglik_individualized
double negloglik_individualized(double arg, arma::vec z, arma::vec n, arma::vec trunc_lower, arma::vec trunc_upper, double p0);
RcppExport SEXP _EmpiNull_negloglik_individualized(SEXP argSEXP, SEXP zSEXP, SEXP nSEXP, SEXP trunc_lowerSEXP, SEXP trunc_upperSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type arg(argSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_lower(trunc_lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_upper(trunc_upperSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(negloglik_individualized(arg, z, n, trunc_lower, trunc_upper, p0));
    return rcpp_result_gen;
END_RCPP
}
// negloglik_confounder
double negloglik_confounder(const arma::vec& arg, const arma::vec& z, arma::mat x_bar, arma::vec n, arma::vec trunc_lower, arma::vec trunc_upper, double p0);
RcppExport SEXP _EmpiNull_negloglik_confounder(SEXP argSEXP, SEXP zSEXP, SEXP x_barSEXP, SEXP nSEXP, SEXP trunc_lowerSEXP, SEXP trunc_upperSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_bar(x_barSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_lower(trunc_lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_upper(trunc_upperSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(negloglik_confounder(arg, z, x_bar, n, trunc_lower, trunc_upper, p0));
    return rcpp_result_gen;
END_RCPP
}
// negloglik_confounder_gs
double negloglik_confounder_gs(const arma::vec& arg, const arma::vec& z, arma::mat x_bar, arma::vec n, arma::vec trunc_lower, arma::vec trunc_upper, double p0, double phi);
RcppExport SEXP _EmpiNull_negloglik_confounder_gs(SEXP argSEXP, SEXP zSEXP, SEXP x_barSEXP, SEXP nSEXP, SEXP trunc_lowerSEXP, SEXP trunc_upperSEXP, SEXP p0SEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_bar(x_barSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_lower(trunc_lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_upper(trunc_upperSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(negloglik_confounder_gs(arg, z, x_bar, n, trunc_lower, trunc_upper, p0, phi));
    return rcpp_result_gen;
END_RCPP
}
// negloglik_confounder_CRE
double negloglik_confounder_CRE(double arg, const arma::vec& z, arma::vec n, arma::vec trunc_lower, arma::vec trunc_upper, double p0);
RcppExport SEXP _EmpiNull_negloglik_confounder_CRE(SEXP argSEXP, SEXP zSEXP, SEXP nSEXP, SEXP trunc_lowerSEXP, SEXP trunc_upperSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_lower(trunc_lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc_upper(trunc_upperSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(negloglik_confounder_CRE(arg, z, n, trunc_lower, trunc_upper, p0));
    return rcpp_result_gen;
END_RCPP
}
// negloglik_pois2
double negloglik_pois2(const arma::vec& theta, const arma::vec& z, const arma::mat& Xbar, const arma::vec& E, const arma::vec& E2, const arma::vec& trunc_lower, const arma::vec& trunc_upper, double p0);
RcppExport SEXP _EmpiNull_negloglik_pois2(SEXP thetaSEXP, SEXP zSEXP, SEXP XbarSEXP, SEXP ESEXP, SEXP E2SEXP, SEXP trunc_lowerSEXP, SEXP trunc_upperSEXP, SEXP p0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xbar(XbarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type trunc_lower(trunc_lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type trunc_upper(trunc_upperSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    rcpp_result_gen = Rcpp::wrap(negloglik_pois2(theta, z, Xbar, E, E2, trunc_lower, trunc_upper, p0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EmpiNull_negloglik_overall", (DL_FUNC) &_EmpiNull_negloglik_overall, 5},
    {"_EmpiNull_negloglik_individualized", (DL_FUNC) &_EmpiNull_negloglik_individualized, 6},
    {"_EmpiNull_negloglik_confounder", (DL_FUNC) &_EmpiNull_negloglik_confounder, 7},
    {"_EmpiNull_negloglik_confounder_gs", (DL_FUNC) &_EmpiNull_negloglik_confounder_gs, 8},
    {"_EmpiNull_negloglik_confounder_CRE", (DL_FUNC) &_EmpiNull_negloglik_confounder_CRE, 6},
    {"_EmpiNull_negloglik_pois2", (DL_FUNC) &_EmpiNull_negloglik_pois2, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_EmpiNull(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
